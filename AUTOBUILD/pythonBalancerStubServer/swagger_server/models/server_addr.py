# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServerAddr(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ip: str=None, port: int=None, port_iperf: int=None, time: datetime=None):  # noqa: E501
        """ServerAddr - a model defined in Swagger

        :param ip: The ip of this ServerAddr.  # noqa: E501
        :type ip: str
        :param port: The port of this ServerAddr.  # noqa: E501
        :type port: int
        :param port_iperf: The port_iperf of this ServerAddr.  # noqa: E501
        :type port_iperf: int
        :param time: The time of this ServerAddr.  # noqa: E501
        :type time: datetime
        """
        self.swagger_types = {
            'ip': str,
            'port': int,
            'port_iperf': int,
            'time': datetime
        }

        self.attribute_map = {
            'ip': 'ip',
            'port': 'port',
            'port_iperf': 'port_iperf',
            'time': 'time'
        }
        self._ip = ip
        self._port = port
        self._port_iperf = port_iperf
        self._time = time

    @classmethod
    def from_dict(cls, dikt) -> 'ServerAddr':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Server_addr of this ServerAddr.  # noqa: E501
        :rtype: ServerAddr
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this ServerAddr.


        :return: The ip of this ServerAddr.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this ServerAddr.


        :param ip: The ip of this ServerAddr.
        :type ip: str
        """

        self._ip = ip

    @property
    def port(self) -> int:
        """Gets the port of this ServerAddr.

        port of Service server  # noqa: E501

        :return: The port of this ServerAddr.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this ServerAddr.

        port of Service server  # noqa: E501

        :param port: The port of this ServerAddr.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def port_iperf(self) -> int:
        """Gets the port_iperf of this ServerAddr.

        port of iperf server  # noqa: E501

        :return: The port_iperf of this ServerAddr.
        :rtype: int
        """
        return self._port_iperf

    @port_iperf.setter
    def port_iperf(self, port_iperf: int):
        """Sets the port_iperf of this ServerAddr.

        port of iperf server  # noqa: E501

        :param port_iperf: The port_iperf of this ServerAddr.
        :type port_iperf: int
        """
        if port_iperf is None:
            raise ValueError("Invalid value for `port_iperf`, must not be `None`")  # noqa: E501

        self._port_iperf = port_iperf

    @property
    def time(self) -> datetime:
        """Gets the time of this ServerAddr.


        :return: The time of this ServerAddr.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this ServerAddr.


        :param time: The time of this ServerAddr.
        :type time: datetime
        """

        self._time = time
