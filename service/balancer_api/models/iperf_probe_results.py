# coding: utf-8

"""
    Balancer API

    Speedtest load balancer  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: dev@5gst.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from balancer_api.configuration import Configuration


class IperfProbeResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'speed_bits_per_second': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'speed_bits_per_second': 'speed_bits_per_second'
    }

    def __init__(self, timestamp=None, speed_bits_per_second=None, _configuration=None):  # noqa: E501
        """IperfProbeResults - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._timestamp = None
        self._speed_bits_per_second = None
        self.discriminator = None

        self.timestamp = timestamp
        self.speed_bits_per_second = speed_bits_per_second

    @property
    def timestamp(self):
        """Gets the timestamp of this IperfProbeResults.  # noqa: E501


        :return: The timestamp of this IperfProbeResults.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this IperfProbeResults.


        :param timestamp: The timestamp of this IperfProbeResults.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def speed_bits_per_second(self):
        """Gets the speed_bits_per_second of this IperfProbeResults.  # noqa: E501


        :return: The speed_bits_per_second of this IperfProbeResults.  # noqa: E501
        :rtype: int
        """
        return self._speed_bits_per_second

    @speed_bits_per_second.setter
    def speed_bits_per_second(self, speed_bits_per_second):
        """Sets the speed_bits_per_second of this IperfProbeResults.


        :param speed_bits_per_second: The speed_bits_per_second of this IperfProbeResults.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and speed_bits_per_second is None:
            raise ValueError("Invalid value for `speed_bits_per_second`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                speed_bits_per_second is not None and speed_bits_per_second > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `speed_bits_per_second`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                speed_bits_per_second is not None and speed_bits_per_second < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `speed_bits_per_second`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._speed_bits_per_second = speed_bits_per_second

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IperfProbeResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IperfProbeResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IperfProbeResults):
            return True

        return self.to_dict() != other.to_dict()
